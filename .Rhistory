setwd("C:/Users/daniel.gardiner/Desktop/shape_file_layers")
shp.files.all  = c("Health_Protection_Teams_En_20190214.shp",
"Local_Authority_Districts_EM_20190214.shp",
"Local_Authority_Districts_ENG_20190214.shp",
"Local_Authority_Districts_EoE_20190214.shp",
"Local_Authority_Districts_Lon_20190214.shp",
"Local_Authority_Districts_NE_20190214.shp",
"Local_Authority_Districts_NW_20190214.shp",
"Local_Authority_Districts_SE_20190214.shp",
"Local_Authority_Districts_SEaL_20190214.shp",
"Local_Authority_Districts_SW_20190214.shp",
"Local_Authority_Districts_WM_20190214.shp",
"Local_Authority_Districts_YH_20190214.shp",
"PHE_Centres_En_20190214.shp")
shp.files.la = c("Local_Authority_Districts_EM_20190214.shp", "Local_Authority_Districts_ENG_20190214.shp",
"Local_Authority_Districts_EoE_20190214.shp", "Local_Authority_Districts_Lon_20190214.shp",
"Local_Authority_Districts_NE_20190214.shp", "Local_Authority_Districts_NW_20190214.shp",
"Local_Authority_Districts_SE_20190214.shp", "Local_Authority_Districts_SEaL_20190214.shp",
"Local_Authority_Districts_SW_20190214.shp", "Local_Authority_Districts_WM_20190214.shp",
"Local_Authority_Districts_YH_20190214.shp")
centre.map = spTransform(readOGR(".", "PHE_Centres_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
hpt.map = spTransform(readOGR(".", "Health_Protection_Teams_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
em.la.map = spTransform(readOGR(".", "Local_Authority_Districts_EM_20190214"),
CRS("+proj=longlat +datum=WGS84"))
eoe.la.map = spTransform(readOGR(".", "Local_Authority_Districts_EoE_20190214"),
CRS("+proj=longlat +datum=WGS84"))
lon.la.map = spTransform(readOGR(".", "Local_Authority_Districts_Lon_20190214"),
CRS("+proj=longlat +datum=WGS84"))
ne.la.map = spTransform(readOGR(".", "Local_Authority_Districts_NE_20190214"),
CRS("+proj=longlat +datum=WGS84"))
nw.la.map = spTransform(readOGR(".", "Local_Authority_Districts_NW_20190214"),
CRS("+proj=longlat +datum=WGS84"))
se.la.map = spTransform(readOGR(".", "Local_Authority_Districts_SE_20190214"),
CRS("+proj=longlat +datum=WGS84"))
seal.la.map = spTransform(readOGR(".", "Local_Authority_Districts_SEaL_20190214"),
CRS("+proj=longlat +datum=WGS84"))
sw.la.map = spTransform(readOGR(".", "Local_Authority_Districts_SW_20190214"),
CRS("+proj=longlat +datum=WGS84"))
wm.la.map = spTransform(readOGR(".", "Local_Authority_Districts_WM_20190214"),
CRS("+proj=longlat +datum=WGS84"))
yh.la.map = spTransform(readOGR(".", "Local_Authority_Districts_YH_20190214"),
CRS("+proj=longlat +datum=WGS84"))
eng.la.map = spTransform(readOGR(".", "Local_Authority_Districts_ENG_20190214"),
CRS("+proj=longlat +datum=WGS84"))
setwd(d)
usethis::use_data(centre.map,
hpt.map,
sw.la.map,
em.la.map,
eoe.la.map,
lon.la.map,
ne.la.map,
nw.la.map,
se.la.map,
seal.la.map,
sw.la.map,
wm.la.map,
yh.la.map,
eng.la.map,
internal = TRUE, overwrite = TRUE)
local.authority
local.authority = "SW"
local.authority
la.map = paste0(tolower(local.authority), ".la.map")
la.map
get(la.map)
setwd("C:/Users/daniel.gardiner/Desktop/shape_file_layers")
list.files()
postcodes = c("Tw1 2ju", "bs2 9rq", "bs3 1 ps")
postcodes = c("Tw1 2ju", "bs2 9rq", "bs3 1ps")
library(rgisws)
library(sp)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(tidyverse)
library(RColorBrewer)
# load postcodes (either from clipboard or specified as an argument)
if(is.null(postcodes)) {
# read in data from clipboard
temp = read_from_clipboard()
# extract out as postcode
postcodes = as.character(temp[, 1])
} else {
NULL
}
# apply get.geog function
data = postcode_lookup(postcodes,
c("oslaua", "hptcd", "phec", "phereg", "lsoa11", "msoa11", "ccg"),
xy = 4326,
return_names = TRUE)
# summarise number of postcodes with missing latitude/longitude
postcode.summary = paste0("Postcodes which matched successfully: ", sum(!(is.na(data$x) | is.na(data$y))),
"\n",
"Postcodes which failed to match: ", sum(is.na(data$x) | is.na(data$y)))
# remove postcodes which failed to match
data = data[!(is.na(data$x) | is.na(data$y)), ]
##############################################################################
# 2. load shape files
# set working directory to shape file subfolder
setwd("U:/Core Services/Field Epidemiology Team Bristol/Duty Desk/Resources/R tools/Mapping/shape files")
setwd("C:/Users/daniel.gardiner/Desktop/shape_file_layers")
# look at all available shape files
list.files()[grep("shp$", list.files())]
# load desired shape files
# (using if statements to detect whether the shape files have already been loaded,
# if they have dont load again)
if(any(ls() %in% "centre.map")){
NULL
} else {
# read in shape file
centre.map = spTransform(readOGR(".", "PHE_Centres_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
centre.map@data$order = 1:nrow(centre.map@data)
# append number of cases for each polygon onto each shape file
centre.map@data = merge(x = centre.map@data, y= data.frame(table(data$phec_nm)),
by.x = "PHECNM", by.y = "Var1", all.x = TRUE)
centre.map@data$Freq[is.na(centre.map@data$Freq)] = 0
# create shape file label
centre.map@data$label = paste("<b><a>", centre.map@data$PHECNM, "</a></b>",
"<br/> Number of cases:", centre.map@data$Freq)
# reorder
centre.map@data = centre.map@data[order(centre.map@data$order), ]
}
if(any(ls() %in% "hpt.map")){
NULL
} else {
# read in shape file
hpt.map = spTransform(readOGR(".", "Health_Protection_Teams_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
hpt.map@data$order = 1:nrow(hpt.map@data)
# append number of cases for each polygon onto each shape file
hpt.map@data = merge(x = hpt.map@data, y= data.frame(table(data$hptcd_nm)),
by.x = "HPTNM", by.y = "Var1", all.x = TRUE)
hpt.map@data$Freq[is.na(hpt.map@data$Freq)] = 0
# create shape file label
hpt.map@data$label = paste("<b><a>", hpt.map@data$HPTNM, "</a></b>",
"<br/> Number of cases:", hpt.map@data$Freq)
# reorder
hpt.map@data = hpt.map@data[order(hpt.map@data$order), ]
}
# if(any(ls() %in% "sw.la.map")){
#   NULL
# } else {
#
# read in shape file
ls()
list.files()
sw.la.map = spTransform(readOGR(".", "Local_Authority_Districts_EM_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
sw.la.map@data$order = 1:nrow(sw.la.map@data)
# append number of cases for each polygon onto each shape file
sw.la.map@data = merge(x = sw.la.map@data, y= data.frame(table(data$oslaua_nm)),
by.x = "GSS_NM", by.y = "Var1", all.x = TRUE)
sw.la.map@data$Freq[is.na(sw.la.map@data$Freq)] = 0
# create shape file label
sw.la.map@data$label = paste("<b><a>", sw.la.map@data$GSS_NM, "</a></b>",
"<br/> Number of cases:", sw.la.map@data$Freq)
# reorder
sw.la.map@data = sw.la.map@data[order(sw.la.map@data$order), ]
##############################################################################
# 3. return converted data and shape files
return(list(postcode.summary, data, centre.map, hpt.map, sw.la.map))
sw.la.map
initial_setup = function(postcodes = NULL, local.authority = "SW") {
# function to
# 1. convert postcodes to longitude and latitude
# 2. load shape files
# 3. return converted data and shape files
##############################################################################
# 1. convert postcodes to longitude and latitude
# set working directory to same folder that this R script is saved in
# load packages and functions
library(rgisws)
library(sp)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(tidyverse)
library(RColorBrewer)
# load postcodes (either from clipboard or specified as an argument)
if(is.null(postcodes)) {
# read in data from clipboard
temp = read_from_clipboard()
# extract out as postcode
postcodes = as.character(temp[, 1])
} else {
NULL
}
# apply get.geog function
data = postcode_lookup(postcodes,
c("oslaua", "hptcd", "phec", "phereg", "lsoa11", "msoa11", "ccg"),
xy = 4326,
return_names = TRUE)
# summarise number of postcodes with missing latitude/longitude
postcode.summary = paste0("Postcodes which matched successfully: ", sum(!(is.na(data$x) | is.na(data$y))),
"\n",
"Postcodes which failed to match: ", sum(is.na(data$x) | is.na(data$y)))
# remove postcodes which failed to match
data = data[!(is.na(data$x) | is.na(data$y)), ]
##############################################################################
# 2. load shape files
# set working directory to shape file subfolder
setwd("U:/Core Services/Field Epidemiology Team Bristol/Duty Desk/Resources/R tools/Mapping/shape files")
setwd("C:/Users/daniel.gardiner/Desktop/shape_file_layers")
# look at all available shape files
list.files()[grep("shp$", list.files())]
# load desired shape files
# (using if statements to detect whether the shape files have already been loaded,
# if they have dont load again)
if(any(ls() %in% "centre.map")){
NULL
} else {
# read in shape file
centre.map = spTransform(readOGR(".", "PHE_Centres_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
centre.map@data$order = 1:nrow(centre.map@data)
# append number of cases for each polygon onto each shape file
centre.map@data = merge(x = centre.map@data, y= data.frame(table(data$phec_nm)),
by.x = "PHECNM", by.y = "Var1", all.x = TRUE)
centre.map@data$Freq[is.na(centre.map@data$Freq)] = 0
# create shape file label
centre.map@data$label = paste("<b><a>", centre.map@data$PHECNM, "</a></b>",
"<br/> Number of cases:", centre.map@data$Freq)
# reorder
centre.map@data = centre.map@data[order(centre.map@data$order), ]
}
if(any(ls() %in% "hpt.map")){
NULL
} else {
# read in shape file
hpt.map = spTransform(readOGR(".", "Health_Protection_Teams_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
hpt.map@data$order = 1:nrow(hpt.map@data)
# append number of cases for each polygon onto each shape file
hpt.map@data = merge(x = hpt.map@data, y= data.frame(table(data$hptcd_nm)),
by.x = "HPTNM", by.y = "Var1", all.x = TRUE)
hpt.map@data$Freq[is.na(hpt.map@data$Freq)] = 0
# create shape file label
hpt.map@data$label = paste("<b><a>", hpt.map@data$HPTNM, "</a></b>",
"<br/> Number of cases:", hpt.map@data$Freq)
# reorder
hpt.map@data = hpt.map@data[order(hpt.map@data$order), ]
}
# if(any(ls() %in% "sw.la.map")){
#   NULL
# } else {
#
# read in shape file
sw.la.map = spTransform(readOGR(".", paste0("Local_Authority_Districts_",
local.authority,
"_20190214")),
CRS("+proj=longlat +datum=WGS84"))
sw.la.map = spTransform(readOGR(".", "Local_Authority_Districts_EM_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
sw.la.map@data$order = 1:nrow(sw.la.map@data)
# append number of cases for each polygon onto each shape file
sw.la.map@data = merge(x = sw.la.map@data, y= data.frame(table(data$oslaua_nm)),
by.x = "GSS_NM", by.y = "Var1", all.x = TRUE)
sw.la.map@data$Freq[is.na(sw.la.map@data$Freq)] = 0
# create shape file label
sw.la.map@data$label = paste("<b><a>", sw.la.map@data$GSS_NM, "</a></b>",
"<br/> Number of cases:", sw.la.map@data$Freq)
# reorder
sw.la.map@data = sw.la.map@data[order(sw.la.map@data$order), ]
##############################################################################
# 3. return converted data and shape files
return(list(postcode.summary, data, centre.map, hpt.map, sw.la.map))
}
map_detailed = function(postcodes = NULL,
local.authority = "SW",
minzoom = NULL,
maxzoom = NULL,
include.popup = TRUE) {
# run initial setup function
temp = initial_setup(postcodes, local.authority)
postcode.summary = temp[[1]]
data = temp[[2]]
centre.map = temp[[3]]
hpt.map = temp[[4]]
sw.la.map = temp[[5]]
# set min and max zoom
minzoom = ifelse(is.null(minzoom), 0, minzoom)
maxzoom = ifelse(is.null(maxzoom), 18, maxzoom)
# apply include.popup argument (to either include/remove popup)
if(include.popup){
NULL
} else {
data$postcode  = NULL
}
# BASIC MAP
map = leaflet() %>%
# add open street view map
addTiles(group = "OpenStreetMap",
options = tileOptions(minZoom = minzoom, maxZoom = maxzoom)) %>%
# add cartodb map
addProviderTiles("CartoDB.Positron", group = "CartoDB.Positron") %>%
# add centre shape file layer
addPolygons(data = centre.map,
fill = TRUE,
fillOpacity = 0.4,
weight = 2,
stroke = TRUE,
opacity = 1,
color = "black",
fillColor = "grey",
popup = ~label,
group = "Centre") %>%
# add south west health protection team layer
addPolygons(data = hpt.map,
fill = TRUE,
fillOpacity = 0.3,
weight = 2,
stroke = TRUE,
opacity = 1,
color = "black",
fillColor = "grey",
popup = ~label,
group = "Health Protection Team") %>%
# add south west local authority layer
addPolygons(data = sw.la.map, fill = TRUE, fillOpacity = 0.2,
weight = 1,
stroke = TRUE,
opacity = 1,
color = "black",
fillColor = "grey",
popup = ~label,
group = "Local Authority") %>%
# add circle markers
addCircleMarkers(lng=data$x,
lat=data$y,
popup = data$pcds,
#clusterOptions = markerClusterOptions(),
stroke = TRUE,
opacity = 1,
fillOpacity = 1,
radius = 3,
group = "Points_circle") %>%
# add layers control
addLayersControl(baseGroups = c("OpenStreetMap", "CartoDB.Positron"),
overlayGroups = c("Points_circle", "Local Authority",
"Health Protection Team", "Centre"),
options = layersControlOptions(collapsed = FALSE))
return(map)
}
map_detailed(postcodes)
list.files()
initial_setup = function(postcodes = NULL, local.authority = "SW") {
# function to
# 1. convert postcodes to longitude and latitude
# 2. load shape files
# 3. return converted data and shape files
##############################################################################
# 1. convert postcodes to longitude and latitude
# set working directory to same folder that this R script is saved in
# load packages and functions
library(rgisws)
library(sp)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(tidyverse)
library(RColorBrewer)
# load postcodes (either from clipboard or specified as an argument)
if(is.null(postcodes)) {
# read in data from clipboard
temp = read_from_clipboard()
# extract out as postcode
postcodes = as.character(temp[, 1])
} else {
NULL
}
# apply get.geog function
data = postcode_lookup(postcodes,
c("oslaua", "hptcd", "phec", "phereg", "lsoa11", "msoa11", "ccg"),
xy = 4326,
return_names = TRUE)
# summarise number of postcodes with missing latitude/longitude
postcode.summary = paste0("Postcodes which matched successfully: ", sum(!(is.na(data$x) | is.na(data$y))),
"\n",
"Postcodes which failed to match: ", sum(is.na(data$x) | is.na(data$y)))
# remove postcodes which failed to match
data = data[!(is.na(data$x) | is.na(data$y)), ]
##############################################################################
# 2. load shape files
# set working directory to shape file subfolder
setwd("U:/Core Services/Field Epidemiology Team Bristol/Duty Desk/Resources/R tools/Mapping/shape files")
setwd("C:/Users/daniel.gardiner/Desktop/shape_file_layers")
# look at all available shape files
list.files()[grep("shp$", list.files())]
# load desired shape files
# (using if statements to detect whether the shape files have already been loaded,
# if they have dont load again)
if(any(ls() %in% "centre.map")){
NULL
} else {
# read in shape file
centre.map = spTransform(readOGR(".", "PHE_Centres_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
centre.map@data$order = 1:nrow(centre.map@data)
# append number of cases for each polygon onto each shape file
centre.map@data = merge(x = centre.map@data, y= data.frame(table(data$phec_nm)),
by.x = "PHECNM", by.y = "Var1", all.x = TRUE)
centre.map@data$Freq[is.na(centre.map@data$Freq)] = 0
# create shape file label
centre.map@data$label = paste("<b><a>", centre.map@data$PHECNM, "</a></b>",
"<br/> Number of cases:", centre.map@data$Freq)
# reorder
centre.map@data = centre.map@data[order(centre.map@data$order), ]
}
if(any(ls() %in% "hpt.map")){
NULL
} else {
# read in shape file
hpt.map = spTransform(readOGR(".", "Health_Protection_Teams_En_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
hpt.map@data$order = 1:nrow(hpt.map@data)
# append number of cases for each polygon onto each shape file
hpt.map@data = merge(x = hpt.map@data, y= data.frame(table(data$hptcd_nm)),
by.x = "HPTNM", by.y = "Var1", all.x = TRUE)
hpt.map@data$Freq[is.na(hpt.map@data$Freq)] = 0
# create shape file label
hpt.map@data$label = paste("<b><a>", hpt.map@data$HPTNM, "</a></b>",
"<br/> Number of cases:", hpt.map@data$Freq)
# reorder
hpt.map@data = hpt.map@data[order(hpt.map@data$order), ]
}
# if(any(ls() %in% "sw.la.map")){
#   NULL
# } else {
#
# read in shape file
sw.la.map = spTransform(readOGR(".", paste0("Local_Authority_Districts_",
local.authority,
"_20190214")),
CRS("+proj=longlat +datum=WGS84"))
sw.la.map = spTransform(readOGR(".", "Local_Authority_Districts_ENG_20190214"),
CRS("+proj=longlat +datum=WGS84"))
# create order column
sw.la.map@data$order = 1:nrow(sw.la.map@data)
# append number of cases for each polygon onto each shape file
sw.la.map@data = merge(x = sw.la.map@data, y= data.frame(table(data$oslaua_nm)),
by.x = "GSS_NM", by.y = "Var1", all.x = TRUE)
sw.la.map@data$Freq[is.na(sw.la.map@data$Freq)] = 0
# create shape file label
sw.la.map@data$label = paste("<b><a>", sw.la.map@data$GSS_NM, "</a></b>",
"<br/> Number of cases:", sw.la.map@data$Freq)
# reorder
sw.la.map@data = sw.la.map@data[order(sw.la.map@data$order), ]
##############################################################################
# 3. return converted data and shape files
return(list(postcode.summary, data, centre.map, hpt.map, sw.la.map))
}
map_detailed(postcodes)
tolower(local.authority)
local.authority
local.authority.area = "SW"
paste0(local.authority.area, ".la.map")
paste0(tolower(local.authority.area), ".la.map")
install.packages("roxygen2")
PHEQuickMap::map_detailed(c("tw12ju", "bs29rq"))
PHEQuickMap::map_detailed(c("tw12ju", "bs29rq"))
PHEQuickMap::map_detailed(c("tw12ju", "bs29rq"))
library(PHEQuickMap)
PHEQuickMap::map_detailed(c("tw12ju", "bs29rq"))
library(PHEQuickMap)
map_detailed(c("tw12ju"))
map_basic(c("tw12ju"))
library(PHEQuickMap)
map_basic(c("tw12ju"))
library(tidyverse)
map_basic(c("tw12ju"))
library(tidyverse)
library(PHEQuickMap)
map_basic(c("tw12ju"))
usethis::use_package("tidyverse")
usethis::use_package("leaflet")
usethis::use_package("tidyr")
usethis::use_package("ggplot2")
usethis::use_package("magrittr")
usethis::use_package("leaflet")
usethis::use_package("leaflet")
usethis::use_package("leaflet")
usethis::use_package("leaflet.extras")
usethis::use_package("leaflet.extras")
library(PHEQuickMap)
map_basic(c("tw12ju"))
map_detailed(c("tw12ju"))
map_detailed(c("tw12ju"), local.authority.area = "eng")
map_detailed(c("tw12ju"), local.authority.area = "ym")
library(PHEQuickMap)
map_detailed(c("tw12ju"), local.authority.area = "eng")
map_detailed(c("tw12ju"), local.authority.area = "ym")
map_detailed(c("tw12ju"), local.authority.area = "yh")
library(PHEQuickMap)
map_detailed(c("tw12ju"), local.authority.area = "yh")
map_detailed(c("tw12ju"), local.authority.area = NULL)
map_detailed(c("tw12ju"), local.authority.area = "seal")
library(PHEQuickMap)
map_detailed(c("tw12ju"), local.authority.area = "seal")
map_detailed(c("tw12ju"), local.authority.area = "yu")
map_detailed(c("tw12ju"), local.authority.area = "sw")
